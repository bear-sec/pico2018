in this challenge again we are directed towards the SSTI in flask. 
Since this is a 900 points challenge i recon we will break a sweat.
I think that this will give us RCE on the server, so lets try go that way.
in this great github:
https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Template%20injections
we can find a payload that uses jinja2, just putting this payload doent work, so we need to research a bit about what it is.
First of all since we know jinja2 is Python based, and we know python, we recognize the parts of the payload, so lets try and break it down:

''.__class__.__mro__[2].__subclasses__()[40]('/etc/passwd').read()

so running this in python, without the ('/etc/passwd').read(), gives us the following:

So why on earth doesnt the payload work. Well one thing we can see here is that we have hardcoded offsets into the presumably arrays, like __mro__[2], and __subclasses__[40], maybe we need to just adjust it so it will work here. 
So fist thing to do is check if the simplest payload works again, and go from there.
(should be noted, dont know if its my browser but adding cards breaks the payload, so i needed to delete the last one each time)
''.__class__
Great! it works, lets go from here, we need the baseclasses of our 'str' class and choose one that has some interesting subclasses.
next is ''.__class__.__mro__
Cool, we see that there are 2 classes, 'str' and 'object', so thats failure point #1 that we found for the prepared payload, it didnt have a third object in the list so [2] wont work. 
Now lets see what interesting subclasses of 'object' we can use. we will list them using:
''.__class__.__mro__[1].__subclasses__()
Woah, thats a lot of data, lets find a way to parse it, lets replace in npp < to '< and > to >' so that it will be an array of strings that we can work with in python.
Ok, lets try and find some interesting class that we can use, like subprocess. 
Nice, we have subprocess.Popen, so we can call a process and see its output. lets try and run a command like 'id'.
Lets try and call a command in our python shell with Popen, and catch the output with a oneliner. What we need to pass to Popen to call a command and catch the output? well, the command, (in my case ill try and run whoami cause im on a windows machine) and that we need to pipe the output to python. so we need to set stdout to subprocess.PIPE, but we dont have subprocess class, we have Popen, but PIPE is a const that is equals to -1. ok, lets continue crafting the payload.
Ok so after we checked that the payload works on my windows machine, lets change it and run on the vulnerable machine.
DAMN! nothing beats the feeling of RCE that works.
ok, lets keep the eyes on the prize, we need to find the flag, presumably a file? lets ls current dir.
and heres the flag, so lets just cat the file, remember that to add arguments we need to change the argument from just a string to a list i.e. ['cat', 'flag']
