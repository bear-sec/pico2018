#from flask import Flask, render_template, request, url_for, redirect, make_response, flash
import json
import base64
from hashlib import md5
from base64 import b64decode
from base64 import b64encode
from Crypto import Random
from Crypto.Cipher import AES

#app = Flask(__name__)
key = 'seed removed'
flag_value = 'flag removed'

BLOCK_SIZE = 16  # Bytes
pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * \
                chr(BLOCK_SIZE - len(s) % BLOCK_SIZE)
unpad = lambda s: s[:-ord(s[len(s) - 1:])]


def login(user, password):


    cookie_data ="{'admin': 0, 'username': '"+user+"', 'password': '"+password+"'}"
    #print(cookie)
    #cookie_data = json.dumps(cookie, sort_keys=True)
    encrypted = AESCipher(key).encrypt(cookie_data)
    #print(encrypted)
    return encrypted , cookie_data


def flag(cookie):
  try:
      encrypted = cookie
  except KeyError:
      #print(cookie)
      return 
  data = AESCipher(key).decrypt(encrypted)
  print("data = "+data)
  data = json.loads(data)

  try:
     check = data['admin']
  except KeyError:
     check = 0
  if check == 1:
      print("Success")
    
  return 

class AESCipher:
    """
    Usage:
        c = AESCipher('password').encrypt('message')
        m = AESCipher('password').decrypt(c)
    Tested under Python 3 and PyCrypto 2.6.1.
    """

    def __init__(self, key):
        self.key = md5(key.encode('utf8')).hexdigest()

    def encrypt(self, raw):
        raw = pad(raw)
        iv = Random.new().read(AES.block_size)
        cipher = AES.new(self.key, AES.MODE_CBC, iv)
        return b64encode(iv + cipher.encrypt(raw))

    def decrypt(self, enc):
        enc = b64decode(enc)
        iv = enc[:16]
        cipher = AES.new(self.key, AES.MODE_CBC, iv)
        return unpad(cipher.decrypt(enc[16:])).decode('utf8')


#enc , payload = login('adm', 'p')
enc ='0uTxbDTBhdqh+r7bJv1ggFKU2azwsUpI/VjMLvPxAXRTs/IHaLpzz10MHOHlC2LJiNp5zxIo1sHbnIebV+n7Hev8sVUtd2nfufcOLGvE+Go='
print("enc = "+ enc)
enc = base64.b64decode(enc)
#print("cook = "+payload)
#print("Bef  = "+enc)
cipher_list = []
#payload ="{'username': 'adm', 'admin': 1, 'password': 'p'}"
ciphertext = enc

i = 0
while i*16 <= len(ciphertext):
    cipher_list.append(ciphertext[i*16: 16 + (i*16)])
    i += 1
cipher_list.remove(cipher_list[5])
y=10

attack_on_block = cipher_list[0]
list1 = list(attack_on_block)
list1[y] = chr(ord(list1[y]) ^ ord("0") ^ ord("1"))
cipher_list[0] = ''.join(list1)
ciphertext = ''.join(cipher_list)
rep = base64.b64encode(ciphertext)
print("rep = " +rep)

#print("Aft  = "+ciphertext)
#flag(base64.b64encode(ciphertext))

