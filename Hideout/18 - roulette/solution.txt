in this roulette game we need to win a billion dollars to get the flag. so of course we wont be playing the roulette until we win this amount legitimately, and the challenge suggests that there are 2 bugs in the code. We get thesource code so we wont be shooting in the dark. 
in these sorts of challenges the first go-to bug to check is wether of not i can bet more than i have, by supplying a huge number that will be compared and interpreted as a signed negative number, and pass the check at line 56 in get_bet function. and indeed its vulnerable. We see that in the C source the variable 'bet' is of type long which means its signed, and the compiler will treat it as one in conditional jumps and whatnot. We can of course check if its true and supply such a number, and we can see that if overflows, and lets us win a lot of cash. Ok now we know it has trouble handling numbers, lets try betting a negative number so it could remove this number from our initial cash and x-(-y) = x+y, so we will actually win, and we can get the 1 billion dollars quick and easy. but no, it says that we are cheaters (no argue about that) and throws us away saying that were not on a streak. 
Lets go back to the code and find the second bug. Since the code only has the input of a bet, and a choice, lets check that the choice is handled correctly, or the "random number" of the roulette. Lets look at the how the number is generated, and maybe we can predict it. 
From main, we get_bet(), and rigt after we get_choice(), which checks well that its a number between 1, and 36. Lets continue to play_roulette. 
so first we see a call to rand(), aha, well lets see if theres a previous call to srand, and if not we know the seed and can predict its values and know the outcome of spinning the roulette. so we search of srand in the source and see that in line 52, theres a call to it with a positive number not greater than 5000, so now we can easily predict the outcome of a few roulette spins by just generating the first, lets say, 10 numbers from tha seed and when we actually spin it we can know to what series the of random numbers we belong, but wait! the seed is returned here, so lets see where is it used. damn! line 185, in main the cash we get a tthe beginnig of the game is the seed, easy!
all we need to do is calculate a few numbers to know which consecutive ones will come to bet on them. 
and finally with the fisr bug, we can win an arbitrary large amount of money.